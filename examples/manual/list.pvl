// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases ListsPVL
//:: tools silicon
class node {

  int val;
  node next;
  
  resource state()=Perm(val,1) ** Perm(next,1) ** (next!=null ==> next.state());

  requires state();
  seq<int> contents()=unfolding state() in (next==null?seq<int>{val}:seq<int>{val}+next.contents());

  requires n!=null ==> n.state();
  ensures  state() ** contents()==(n==null?seq<int>{v}:seq<int>{v}+\old(n.contents()));
  node(int v,node n){
    val=v;
    next=n;
    fold state();
  }

  void main(){
      seq<int> tmp;
      tmp=seq<int>{1,2,3};
      assert tmp==seq<int>{1}+seq<int>{2,3};
      assert head(tmp)==1;
      assert tail(tmp)==seq<int>{2,3};
      node l=new node(37,null);
      assert l.contents()==seq<int>{37};
      assert 37 in l.contents();
  }
  
}
